#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 - 2015 CERN
# Author: Pawel Szostek (pawel.szostek@cern.ch)
# Multi-tool support by Javier D. Garcia-Lasheras (javier@garcialasheras.com)
#
# This file is part of Hdlmake.
#
# Hdlmake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hdlmake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hdlmake.  If not, see <http://www.gnu.org/licenses/>.
#

"""Module providing support for IVerilog (Icarus Verilog) simulator"""

from __future__ import absolute_import
import string

from .makefilesim import MakefileSim
from ..sourcefiles.srcfile import VerilogFile, VHDLFile, SVFile


class ToolIVerilogCocotb(MakefileSim):

    """Class providing the interface for Icarus Verilog simulator"""

    TOOL_INFO = {
        'name': 'Icarus Verilog',
        'id': 'iverilog',
        'windows_bin': None,
        'linux_bin': 'iverilog'}

    STANDARD_LIBS = ['std', 'ieee', 'ieee_proposed', 'vl', 'synopsys']

    HDL_FILES = {VerilogFile: '', VHDLFile: '', SVFile: ''}

    CLEAN_TARGETS = {'clean': ["run.command", "ivl_vhdl_work", "work"],
                     'mrproper': ["*.vcd", "*.fst", "*.vvp", "work", "*.xml", "*.log", "run.command", "__pycache__"]}

    SIMULATOR_CONTROLS = {'vlog': 'echo $< >> run.command',
                          'vhdl': 'echo $< >> run.command',
                          'simulation': 'MODULE=test_$(TOP_MODULE) TESTCASE=$(TEST_CASE) TOPLEVEL=$(TOP_MODULE) TOPLEVEL_LANG=verilog vvp -M $(shell cocotb-config --lib-dir) -m libcocotbvpi_icarus '
                                        '$(TOP_MODULE).vvp '
                                        '$(VVP_OPT) ',
                           'iverilog_dump' : 'echo \'module iverilog_dump();\' > $@\n'
	                                         '\t\techo \'initial begin\' >> $@\n'
	                                         '\t\techo \'    $$dumpfile("$(TOPLEVEL).fst");\' >> $@\n'
	                                         '\t\techo \'    $$dumpvars(0, $(TOPLEVEL));\' >> $@\n'
	                                         '\t\techo \'end\' >> $@\n'
	                                         '\t\techo \'endmodule\' >> $@\n',
                          'compiler': 'iverilog $(IVERILOG_OPT) '
                                      '-D COCOTB_SIM=1 '
                                      '-s $(TOP_MODULE) '
                                      '-o $(TOP_MODULE).vvp '
                                      '-f run.command'}

    def __init__(self):
        super(ToolIVerilogCocotb, self).__init__()

    def _makefile_sim_top(self):
        """Generic method to write the simulation Makefile top section"""
        super(ToolIVerilogCocotb, self)._makefile_sim_top()
        top_level = """\
SIM   ?= icarus
WAVES ?= 0

COCOTB_HDL_TIMEUNIT      = 1ns
COCOTB_HDL_TIMEPRECISION = 1ps

TOPLEVEL = {top_module}
MODULE   = test_{top_module}

ifeq ($(WAVES), 1)
	IVERILOG_OPT += -s iverilog_dump 
endif\n
"""
        self.writeln(top_level.format(
            top_module=self.manifest_dict["sim_top"]))

    def _makefile_sim_sources(self):
        """Generic method to write the simulation Makefile HDL sources"""
        #self.fileset.add()
        super(ToolIVerilogCocotb, self)._makefile_sim_sources()

    def _makefile_sim_compilation(self):
        """Generate compile simulation Makefile target for IVerilog"""
        self.writeln("include $(shell cocotb-config --makefiles)/Makefile.sim\n\n")
        self.writeln("iverilog_dump.v:")
        self.writeln("\t\t" + self.SIMULATOR_CONTROLS['iverilog_dump'])
        self.writeln()
        self.writeln("simulation: icarus_compile")
        self.writeln("\t\t" + self.SIMULATOR_CONTROLS['simulation'])
        self.writeln()
        self.writeln("icarus_compile: include_dirs $(VERILOG_OBJ) $(VHDL_OBJ)")
        self.writeln("\t\t" + self.SIMULATOR_CONTROLS['compiler'])
        self.writeln()
        self.writeln("include_dirs:")
        self.writeln("\t\techo \"# IVerilog command file,"
                     " generated by HDLMake\" > run.command")
        self.writeln("\t\techo \"./iverilog_dump.v\" > run.command")
        for inc in self.manifest_dict.get("include_dirs", []):
            self.writeln("\t\techo \"+incdir+" + inc + "\" >> run.command")
        self.writeln('\n')
        self._makefile_sim_dep_files()

    def _makefile_sim_properties(self):
        """Create the property list"""
        elab_properties = self.manifest_dict.get("iverilog_elab_param")
        elab_temp = string.Template("-P $p_name=$p_value ")
        elab_string = ""
        for prop_key, prop_param in elab_properties.items():
            if prop_key == "defparam":
                for param_name, param_value in prop_param.items():
                    elab_string += "IVERILOG_OPT += -P $(TOP_MODULE)" + "." + string.Template("$p_name=$p_value\n").substitute(p_name=param_name, p_value=param_value)
        return elab_string

    def _makefile_sim_options(self):
        """Print the IVerilog options to the Makefile"""
        iverilog_opt = self.manifest_dict.get("iverilog_opt")
        iverilog_string = string.Template(
            """IVERILOG_OPT += ${iverilog_opt}\n""")
        property_string = self._makefile_sim_properties()
        self.writeln(iverilog_string.substitute(
            iverilog_opt=iverilog_opt) + property_string)
        vvp_opt = self.manifest_dict.get("vvp_opt")
        vvp_string = string.Template(
            """VVP_OPT := ${vvp_opt}\n""")
        self.writeln(vvp_string.substitute(
            vvp_opt=vvp_opt))
        test_case = self.manifest_dict.get("test_case")
        if not test_case is None:
            testcase_string = string.Template(
                """TEST_CASE := ${test_case}\n""")
            self.writeln(testcase_string.substitute(
                test_case=test_case))

    def _makefile_sim_local(self):
        """Generic method to write the simulation Makefile local target"""
        self.writeln("#target for performing local simulation\n"
                     "local: sim_pre_cmd simulation sim_post_cmd iverilog_dump.v\n")

    def _makefile_sim_clean(self):
        """Generic method to write the simulation Makefile user clean target"""
        super(ToolIVerilogCocotb, self).makefile_mrproper()
